#ifndef SETTINGSCONTAINER_H_
#define SETTINGSCONTAINER_H_

#include <map>
#include <list>
#include <string>
#include <stdexcept>
#include "constants.h"
#include "CLog.h"
#include <assert.h>
#include "Singleton.hpp"


//œô¨¸œô¨áœô¨Úœô¨Ûœô¨îœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï, œô¨Óœô¨Õœô¨Ýœô¨Õœô¨àœô¨Øœô¨àœô¨ãœô¨Õœô¨Üœô¨ëœô¨Õ CSocket œô¨Ø œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Ðœô¨Üœô¨Ø, œô¨Ýœô¨Ðœô¨áœô¨Ûœô¨Õœô¨Ôœô¨ãœô¨îœô¨éœô¨Øœô¨Üœô¨Ø œô¨Þœô¨â œô¨Ýœô¨Õœô¨Óœô¨Þ, œô¨Ø œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ïœô¨Üœô¨Ø œô¨Øœô¨× Tools
class ParamErr: public std::runtime_error
{
public:
	ParamErr( const std::string& Msg ):std::runtime_error( Msg ){};

	virtual ~ParamErr()throw(){};
};

class ParamTypeErr: public ParamErr
{
public:
	ParamTypeErr( const std::string& strParamName ):ParamErr( "shqParams: œô¨·œô¨Ðœô¨ßœô¨àœô¨Þœô¨èœô¨Õœô¨Ý œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨Ýœô¨Õœô¨Òœô¨Õœô¨àœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨âœô¨Øœô¨ßœô¨Ð: " + strParamName ){};
};

class ParamNotFound: public ParamErr
{
public:
	ParamNotFound( const std::string strParamName ):ParamErr( "œô¨½œô¨Õœô¨Þœô¨Ñœô¨åœô¨Þœô¨Ôœô¨Øœô¨Üœô¨ëœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à " + strParamName + " œô¨Ýœô¨Õ œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý" ){};
};

class ParamLoadErr: public ParamErr
{
public:
	ParamLoadErr( const std::string& strMsg ):ParamErr( strMsg ){};
};

class ParamSerializeErr: public ParamErr
{
public:
	ParamSerializeErr( const std::string& strParamName ):ParamErr( "œô¨¾œô¨èœô¨Øœô¨Ñœô¨Úœô¨Ð œô¨×œô¨Ðœô¨Óœô¨àœô¨ãœô¨×œô¨Úœô¨Ø œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð " + strParamName ){};
};

/*!
	œô¨±œô¨Ðœô¨×œô¨Þœô¨Òœô¨ëœô¨Ù œô¨Ðœô¨Ñœô¨áœô¨âœô¨àœô¨Ðœô¨Úœô¨âœô¨Ýœô¨ëœô¨Ù œô¨Úœô¨Ûœô¨Ðœô¨áœô¨á œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨Ôœô¨Ûœô¨ï œô¨åœô¨àœô¨Ðœô¨Ýœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò 
	œô¨Ò œô¨Ðœô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨Þœô¨Ü œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨Ò  œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Õ CSettings. 
    œô¨²œô¨Øœô¨àœô¨âœô¨ãœô¨Ðœô¨Ûœô¨ìœô¨Ýœô¨ëœô¨Ù œô¨Ôœô¨Õœô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨Þœô¨à œô¨Ýœô¨Õœô¨Þœô¨Ñœô¨åœô¨Þœô¨Ôœô¨Øœô¨Ü œô¨Ôœô¨Ûœô¨ï œô¨Úœô¨Þœô¨àœô¨àœô¨Õœô¨Úœô¨âœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨Þœô¨çœô¨Øœô¨éœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨Üœô¨ïœô¨âœô¨Ø.
*/
class BaseParam
{
	public:
			/// œô¨²œô¨Øœô¨àœô¨âœô¨ãœô¨Ðœô¨Ûœô¨ìœô¨Ýœô¨ëœô¨Ù œô¨Ôœô¨Õœô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨Þœô¨à
		virtual ~BaseParam(){};

}; // class BaseParam

/*!
	œô¨Èœô¨Ðœô¨Ñœô¨Ûœô¨Þœô¨Ýœô¨Ýœô¨ëœô¨Ù œô¨Úœô¨Ûœô¨Ðœô¨áœô¨á œô¨Ôœô¨Ûœô¨ï œô¨åœô¨àœô¨Ðœô¨Ýœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ûœô¨ìœô¨Ýœô¨ëœô¨å œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.
	œô¨Ïœô¨Òœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨ßœô¨Þœô¨âœô¨Þœô¨Üœô¨Úœô¨Þœô¨Ü BaseParam, œô¨áœô¨Ûœô¨Õœô¨Ôœô¨Þœô¨Òœô¨Ðœô¨âœô¨Õœô¨Ûœô¨ìœô¨Ýœô¨Þ œô¨Üœô¨Þœô¨Öœô¨Õœô¨â œô¨åœô¨àœô¨Ðœô¨Ýœô¨Øœô¨âœô¨ìœô¨áœô¨ï 
	œô¨Ò œô¨Ðœô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨Þœô¨Ü œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨Ò œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Õ CSettings.
*/


template<typename _T>
class UniParam : public BaseParam
{
public:
	UniParam( _T src )
	{
		m_Param = src;
	}	

	_T m_Param;
};

/*!
	œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á œô¨ßœô¨Þœô¨Ûœô¨ãœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨Ø œô¨×œô¨Ðœô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨ï œô¨âœô¨Øœô¨ßœô¨Øœô¨×œô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.
	œô¨Ïœô¨Òœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨áœô¨Øœô¨Ýœô¨Óœô¨Ûœô¨âœô¨Þœô¨Ýœô¨Þœô¨Ü
*/
//-------------------------------------------------------------------------
class CSettings 
{	
public:

	/*!
		œô¨Èœô¨Ðœô¨Ñœô¨Ûœô¨Þœô¨Ýœô¨Ýœô¨Ðœô¨ï œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ï œô¨ßœô¨Þœô¨Üœô¨Õœô¨éœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨Ò œô¨Ðœô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨ëœô¨Ù œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Ò œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.
		(œô¨Èœô¨Ðœô¨Ñœô¨Ûœô¨Þœô¨Ýœô¨Ýœô¨Þœô¨Ù œô¨áœô¨Ôœô¨Õœô¨Ûœô¨Ðœô¨Ýœô¨Ð œô¨Ôœô¨Ûœô¨ï œô¨âœô¨Þœô¨Óœô¨Þ, œô¨çœô¨âœô¨Þœô¨Ñœô¨ë œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨Òœô¨Ðœô¨âœô¨ì œô¨Úœô¨Þœô¨Ýœô¨áœô¨âœô¨Ðœô¨Ýœô¨âœô¨Ýœô¨ãœô¨î œô¨áœô¨áœô¨ëœô¨Ûœô¨Úœô¨ã)
		
			Param_key	- œô¨Øœô¨Üœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð
			Param_value	- œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð

		œô¨²œô¨ëœô¨Ôœô¨Õœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨ßœô¨Ðœô¨Üœô¨ïœô¨âœô¨ì œô¨ßœô¨Þœô¨Ô œô¨Ýœô¨Þœô¨Òœô¨ëœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à. 
		œô¨¿œô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨ßœô¨Þœô¨Üœô¨Õœô¨éœô¨Ðœô¨Õœô¨âœô¨áœô¨ï œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Ò.
	*/

	template< class T > void PutParam ( std::string Param_key, const T& Param_value )
		{				
			IterParamType it_Param;

				// œô¨²œô¨ëœô¨Ôœô¨Õœô¨Ûœô¨ïœô¨Õœô¨Ü œô¨ßœô¨Ðœô¨Üœô¨ïœô¨âœô¨ì œô¨ßœô¨Þœô¨Ô œô¨Ýœô¨Þœô¨Òœô¨ëœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à
			UniParam<T>* lpParam = new UniParam<T>(Param_value);

				// œô¨½œô¨Ðœô¨åœô¨Þœô¨Ôœô¨Øœô¨Ü œô¨Øœô¨âœô¨Õœô¨àœô¨Ðœô¨âœô¨Þœô¨à, œô¨ãœô¨Úœô¨Ðœô¨×œô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨Ýœô¨Ð œô¨íœô¨Ûœô¨Õœô¨Üœô¨Õœô¨Ýœô¨â œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨á œô¨Úœô¨Ûœô¨îœô¨çœô¨Þœô¨Ü Param_key
			it_Param = mParams.find( Param_key );
			
				// œô¨µœô¨áœô¨Ûœô¨Ø œô¨âœô¨Ðœô¨Úœô¨Þœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨ãœô¨Öœô¨Õ œô¨áœô¨ãœô¨éœô¨Õœô¨áœô¨âœô¨Òœô¨ãœô¨Õœô¨â œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ
			if ( it_Param != mParams.end() )
			{
				delete it_Param->second;
					//œô¨Âœô¨Þ œô¨Üœô¨Õœô¨Ýœô¨ïœô¨Õœô¨Ü œô¨Õœô¨Óœô¨Þ œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨Ýœô¨Ð œô¨Ýœô¨Þœô¨Òœô¨Þœô¨Õ
				it_Param->second = lpParam;						
			}
			else 
			{
				std::pair< ParamType::iterator, bool > pairInsert;
					// œô¨´œô¨Þœô¨Ñœô¨Ðœô¨Òœô¨Ûœô¨ïœô¨Õœô¨Ü  œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Ò
				pairInsert = mParams.insert( ParamType::value_type( Param_key, lpParam ));
				
				assert( pairInsert.second );
			}			
		}
	
		/*!
			œô¨Èœô¨Ðœô¨Ñœô¨Ûœô¨Þœô¨Ýœô¨Ýœô¨Ðœô¨ï œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ï œô¨Øœô¨×œô¨Òœô¨Ûœô¨Õœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨Øœô¨× œô¨Ðœô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Ð œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.
			
				Param_key -  œô¨Øœô¨Üœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð
				Param_value-  œô¨áœô¨áœô¨ëœô¨Ûœô¨Úœô¨Ð œô¨Ýœô¨Ð œô¨Þœô¨Ñœô¨êœô¨Õœô¨Úœô¨â, œô¨Ò œô¨Úœô¨Þœô¨âœô¨Þœô¨àœô¨ëœô¨Ù œô¨Ôœô¨Þœô¨Ûœô¨Öœô¨Ýœô¨Þ œô¨Ñœô¨ëœô¨âœô¨ì œô¨ßœô¨Þœô¨Üœô¨Õœô¨éœô¨Õœô¨Ýœô¨Þ œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð
		

			œô¨¸œô¨éœô¨Õœô¨âœô¨áœô¨ï œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨á œô¨×œô¨Ðœô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Ü œô¨Øœô¨Üœô¨Õœô¨Ýœô¨Õœô¨Ü. 
			œô¨µœô¨áœô¨Ûœô¨Ø œô¨Þœô¨Ý œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý, œô¨Ñœô¨Õœô¨àœô¨Õœô¨âœô¨áœô¨ï œô¨Õœô¨Óœô¨Þ œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨Ø œô¨ßœô¨àœô¨Þœô¨Òœô¨Õœô¨àœô¨ïœô¨Õœô¨âœô¨áœô¨ï, 
			œô¨áœô¨Þœô¨Þœô¨âœô¨Òœô¨Õœô¨âœô¨áœô¨âœô¨Òœô¨ãœô¨Õœô¨â œô¨Ûœô¨Ø œô¨Òœô¨ëœô¨Ñœô¨àœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨âœô¨Øœô¨ßœô¨ã, œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨Þœô¨Üœô¨ã œô¨Ò œô¨èœô¨Ðœô¨Ñœô¨Ûœô¨Þœô¨Ýœô¨Õ. 
		*/

		template< class T > void GetParam ( std::string Param_key,   T& Param_value ) 
		{			
			ConstIterParamType it_Param;
				// œô¨½œô¨Ðœô¨åœô¨Þœô¨Ôœô¨Øœô¨Ü œô¨Øœô¨âœô¨Õœô¨àœô¨Ðœô¨âœô¨Þœô¨à, œô¨ãœô¨Úœô¨Ðœô¨×œô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨Ýœô¨Ð œô¨íœô¨Ûœô¨Õœô¨Üœô¨Õœô¨Ýœô¨â œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨á œô¨Úœô¨Ûœô¨îœô¨çœô¨Þœô¨Ü Param_key
			it_Param = mParams.find( Param_key );
				// œô¨µœô¨áœô¨Ûœô¨Ø œô¨âœô¨Ðœô¨Úœô¨Þœô¨Ù œô¨íœô¨Ûœô¨Õœô¨Üœô¨Õœô¨Ýœô¨â œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý
			if ( it_Param != mParams.end() )
			{
					// œô¨¿œô¨àœô¨Þœô¨Òœô¨Õœô¨àœô¨ïœô¨Õœô¨Ü œô¨âœô¨Þœô¨Óœô¨Þ œô¨Ûœô¨Ø œô¨Þœô¨Ý œô¨âœô¨Øœô¨ßœô¨Ð
				UniParam<T>* lpParam = dynamic_cast< UniParam<T>* >( it_Param->second );
					// œô¨µœô¨áœô¨Ûœô¨Ø œô¨Ôœô¨Ð, 
				if( lpParam )
							// œô¨âœô¨Þ œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨Ü œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à
				{
					T ParamValue = lpParam->m_Param;
					Param_value = ParamValue;
				}
                else				
					throw ParamTypeErr( Param_key );    									
			}
			else
				throw ParamNotFound( Param_key ); 
		} // short GetParam

		/*!
			œô¨Äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ï œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð œô¨Øœô¨× œô¨Ðœô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Ð œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.
			
				Param_key -  œô¨Øœô¨Üœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð				
		
			œô¨¸œô¨éœô¨Õœô¨âœô¨áœô¨ï œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à œô¨á œô¨×œô¨Ðœô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Ü œô¨Øœô¨Üœô¨Õœô¨Ýœô¨Õœô¨Ü. 
			œô¨µœô¨áœô¨Ûœô¨Ø œô¨Þœô¨Ý œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý, œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨ïœô¨Õœô¨Ü œô¨Õœô¨Óœô¨Þ.
		*/
		void DeleteParam ( std::string Param_key ) 
		{	
			IterParamType it_Param;
				// œô¨½œô¨Ðœô¨åœô¨Þœô¨Ôœô¨Øœô¨Ü œô¨Øœô¨âœô¨Õœô¨àœô¨Ðœô¨âœô¨Þœô¨à, œô¨ãœô¨Úœô¨Ðœô¨×œô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨Ýœô¨Ð œô¨íœô¨Ûœô¨Õœô¨Üœô¨Õœô¨Ýœô¨â œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨á œô¨Úœô¨Ûœô¨îœô¨çœô¨Þœô¨Ü Param_key
			it_Param = mParams.find( Param_key );
				// œô¨µœô¨áœô¨Ûœô¨Ø œô¨âœô¨Ðœô¨Úœô¨Þœô¨Ù œô¨íœô¨Ûœô¨Õœô¨Üœô¨Õœô¨Ýœô¨â œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý                                                                                                                                                                                                           
			if ( it_Param != mParams.end() )
				mParams.erase( it_Param );			
			else
				throw ParamNotFound( Param_key ); 	
		} // short DeleteParam

		/*!
			œô¨Äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ï œô¨Þœô¨çœô¨Øœô¨éœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò.			
		*/
	  void ClearParams()
      {		   
		for( ParamType::iterator p = mParams.begin(); p != mParams.end(); p++ )
			delete p->second;
		mParams.clear();                  
      }
	
		/*!
			œô¨´œô¨Õœô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨Þœô¨à.
			œô¨¾œô¨çœô¨Øœô¨éœô¨Ðœô¨Õœô¨â œô¨ßœô¨Ðœô¨Üœô¨ïœô¨âœô¨ì, œô¨Òœô¨ëœô¨Ôœô¨Õœô¨Ûœô¨Õœô¨Ýœô¨Ýœô¨ãœô¨î œô¨ßœô¨Þœô¨Ô œô¨Úœô¨Ðœô¨Öœô¨Ôœô¨ëœô¨Ù œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à.
		*/
		~CSettings()
      {		 
		  ClearParams();
      }

protected:

	CSettings();

private:		

	CSettings( const CSettings& s );
	CSettings& operator=( const CSettings& s );
	/*!
		œô¨°œô¨áœô¨áœô¨Þœô¨æœô¨Øœô¨Ðœô¨âœô¨Øœô¨Òœô¨Ýœô¨ëœô¨Ù œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Ò œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò, œô¨Ò œô¨Úœô¨Þœô¨âœô¨Þœô¨àœô¨Þœô¨Ü
			œô¨Úœô¨Ûœô¨îœô¨ç - œô¨Øœô¨Üœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð
			œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ - œô¨áœô¨Ðœô¨Ü œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨à ( œô¨åœô¨àœô¨Ðœô¨Ýœô¨Øœô¨âœô¨áœô¨ï œô¨Ò œô¨Òœô¨Øœô¨Ôœô¨Õ œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨âœô¨Õœô¨Ûœô¨ï œô¨Ýœô¨Ð œô¨Ñœô¨Ðœô¨×œô¨Þœô¨Òœô¨ëœô¨Ù œô¨Úœô¨Ûœô¨Ðœô¨áœô¨á œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð )

		œô¨² œô¨Úœô¨Ðœô¨çœô¨Õœô¨áœô¨âœô¨Òœô¨Õ œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨âœô¨Ðœô¨Úœô¨Öœô¨Õ œô¨Üœô¨Þœô¨Öœô¨Õœô¨â œô¨Òœô¨ëœô¨áœô¨âœô¨ãœô¨ßœô¨Ðœô¨âœô¨ì œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨âœô¨Õœô¨Ûœô¨ì œô¨Ýœô¨Ð  œô¨ßœô¨Þœô¨âœô¨Þœô¨Üœô¨Þœô¨Ú œô¨Ñœô¨Ðœô¨×œô¨Þœô¨Òœô¨Þœô¨Óœô¨Þ œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Ð. 
		{œô¨´œô¨Ûœô¨ï œô¨Þœô¨Ñœô¨Õœô¨áœô¨ßœô¨Õœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Þœô¨Ûœô¨Øœô¨Üœô¨Þœô¨àœô¨äœô¨Øœô¨×œô¨Üœô¨Ð œô¨åœô¨àœô¨Ðœô¨Ýœô¨Øœô¨âœô¨áœô¨ï œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨âœô¨Õœô¨Ûœô¨ì, œô¨Ð œô¨Ýœô¨Õ œô¨áœô¨Ðœô¨Ü œô¨Þœô¨Ñœô¨êœô¨Õœô¨Úœô¨â}
		œô¨´œô¨Ûœô¨ï œô¨åœô¨àœô¨Ðœô¨Ýœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨Øœô¨áœô¨ßœô¨Þœô¨Ûœô¨ìœô¨×œô¨ãœô¨Õœô¨âœô¨áœô¨ï œô¨Úœô¨Ûœô¨Ðœô¨áœô¨á UniParam, œô¨çœô¨âœô¨Þ œô¨ßœô¨Þœô¨×œô¨Òœô¨Þœô¨Ûœô¨ïœô¨Õœô¨â œô¨åœô¨àœô¨Ðœô¨Ýœô¨Øœô¨âœô¨ì 
		œô¨Ò œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Õ œô¨Þœô¨Ñœô¨êœô¨Õœô¨Úœô¨âœô¨ë œô¨Ûœô¨îœô¨Ñœô¨ëœô¨å œô¨âœô¨Øœô¨ßœô¨Þœô¨Ò.			
	*/
	std::map < std::string, BaseParam * > mParams;
	/*!
		œô¨Âœô¨Øœô¨ß œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Ð œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò
	*/
	typedef std::map < std::string, BaseParam * > ParamType; 
	/*!
		œô¨Âœô¨Øœô¨ß œô¨Úœô¨Þœô¨Ýœô¨áœô¨âœô¨Ðœô¨Ýœô¨âœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨Øœô¨âœô¨Õœô¨àœô¨Ðœô¨âœô¨Þœô¨àœô¨Ð œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Ð
	*/
	typedef ParamType::const_iterator ConstIterParamType; 	
	/*!
		œô¨Âœô¨Øœô¨ß œô¨Øœô¨âœô¨Õœô¨àœô¨Ðœô¨âœô¨Þœô¨àœô¨Ð œô¨Üœô¨Ðœô¨áœô¨áœô¨Øœô¨Òœô¨Ð
	*/
	typedef ParamType::iterator IterParamType; 				
}; // class CSettings

//œô¨Àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨Ðœô¨æœô¨Øœô¨ï œô¨×œô¨Ðœô¨Óœô¨àœô¨ãœô¨×œô¨Úœô¨Ø œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨Øœô¨× œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð Settings.ini
//-----------------------------------------------------------------------------------------------------------------
//---------------------------------------------CIniSettings----------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
class CIniTypeSerializer;

class CIniSettings: public CSettings
{
	friend class CSingleton< CIniSettings >;
public:

	virtual ~CIniSettings();

	void SetModule( const std::string& strModuleName, char** pModuleParams, int iParamCount );

	static bool RegisterTypeSerializer( const std::string& strType, CIniTypeSerializer* TypeSer );

private:

	CIniSettings();
	CIniSettings( const CIniSettings& c );
	CIniSettings& operator=( const CIniSettings& c );

	static std::map< std::string, CIniTypeSerializer* > m_mapSerializers;
};

//œô¨ºœô¨Ûœô¨Ðœô¨áœô¨áœô¨ë, œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨éœô¨Øœô¨Õ œô¨áœô¨Õœô¨àœô¨Øœô¨Ðœô¨Ûœô¨Øœô¨×œô¨Ðœô¨æœô¨Øœô¨î œô¨âœô¨Øœô¨ßœô¨Þœô¨Ò
//-----------------------------------------------------------------------------------------------------------------
//---------------------------------------------CIniTypeSerializer----------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
class CIniTypeSerializer
{
public:
	
	virtual ~CIniTypeSerializer(){};

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer ) = 0;
};

class CIniIntSerializer: public CIniTypeSerializer
{
public:

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer );
};

class CIniStringSerializer: public CIniTypeSerializer
{
public:

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer );
};

class CIniStringListSerializer: public CIniTypeSerializer
{
public:

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer );
};

class CIniBoolSerializer: public CIniTypeSerializer
{
public:

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer );
};

class CIniIpListSerializer: public CIniTypeSerializer
{
public:

	virtual void Load( const std::string& strParamName, const std::string& strParamValue, CSettings* pParamContainer );
};

//-----------------------------------------------------------------------------------------------------------------
//---------------------------------------------Tools---------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------

namespace Tools
{
	bool GetStringList( std::string strSource, std::list< std::string >& listDest );

	struct structIp
	{
		int A,B,C,D;
	};
	
	bool ParseIp( const std::string& strSource, structIp& resIp );
}
typedef CSingleton< CIniSettings > Settings;

#endif 
