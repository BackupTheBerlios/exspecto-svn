#ifndef CDBPROVIDER_H_
#define CDBPROVIDER_H_
/////////////////////////////////////////////////////////////////////////////
// œô¨Áœô¨åœô¨Õœô¨Üœô¨Ð œô¨Ñœô¨Ðœô¨×œô¨ë œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å                                                       //
//                                                                         //
// TableHostes  œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨Ð œô¨Þœô¨ßœô¨Øœô¨áœô¨ëœô¨Òœô¨Ðœô¨Õœô¨â œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ýœô¨ëœô¨Õ œô¨Ò œô¨áœô¨Õœô¨âœô¨Ø œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨ë               //
//   IDhost        INTEGER PRIMARY KEY œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨Ð                   //
//   IPNum         CHAR(15)       IP œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨Ð                            //
//   HostName      TINYTEXT       œô¨¸œô¨Üœô¨ï œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨Ð                           //
//   DateRef       INT            œô¨²œô¨àœô¨Õœô¨Üœô¨ï œô¨ßœô¨Þœô¨áœô¨Ûœô¨Õœô¨Ôœô¨Ýœô¨Õœô¨Ýœô¨Óœô¨Þ œô¨Þœô¨Ñœô¨Ýœô¨Þœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨ï œô¨Øœô¨Ýœô¨äœô¨Þœô¨àœô¨Üœô¨Ðœô¨æœô¨Øœô¨Ø  //
// ----------------------------------------------------------------------- //
// TableFiles   œô¨Þœô¨ßœô¨Øœô¨áœô¨Ðœô¨Ýœô¨Øœô¨Õ œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Þœô¨Ò œô¨Ø œô¨ßœô¨àœô¨Øœô¨Òœô¨ïœô¨×œô¨Úœô¨Ð œô¨Øœô¨å œô¨Ú œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨ã                 //
//   IDfile        INTEGER PRIMARY KEY œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð                        //
//   IDhost        INT            œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨Ð                        //
//   FileName      TINYTEXT       œô¨¸œô¨Üœô¨ï œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð                                //
//   FileSize      INT            œô¨Àœô¨Ðœô¨×œô¨Üœô¨Õœô¨à œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð                             //
//   FileTimeCr    INT            œô¨²œô¨àœô¨Õœô¨Üœô¨ï œô¨áœô¨Þœô¨×œô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨ï œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð                     //
// ----------------------------------------------------------------------- //
// TableWords   œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨Ð œô¨Òœô¨áœô¨Õœô¨å œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ýœô¨ëœô¨å œô¨áœô¨Ûœô¨Þœô¨Ò                                 //
// { œô¨¿œô¨ãœô¨âœô¨Ø œô¨Ú œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ðœô¨Ü œô¨àœô¨Ðœô¨×œô¨Ñœô¨Øœô¨Òœô¨Ðœô¨îœô¨âœô¨áœô¨ï œô¨Ýœô¨Ð œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ð (œô¨Øœô¨Ôœô¨Øœô¨Þœô¨Üœô¨ë) œô¨Ø œô¨×œô¨Ðœô¨Ýœô¨Þœô¨áœô¨ïœô¨âœô¨áœô¨ï œô¨Ò œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨ã.  } //
// { œô¨Íœô¨âœô¨Þ œô¨áœô¨Ôœô¨Õœô¨Ûœô¨Ðœô¨Ýœô¨Þ œô¨Ôœô¨Ûœô¨ï œô¨ãœô¨áœô¨Úœô¨Þœô¨àœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Þœô¨Øœô¨áœô¨Úœô¨Ð œô¨Òœô¨ëœô¨àœô¨Ðœô¨Öœô¨Õœô¨Ýœô¨Øœô¨Ù.                         } //
//   IDword        INTEGER PRIMARY KEY œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ð                        //
//   Word          TINYTEXT       "œô¨¸œô¨Ôœô¨Øœô¨Þœô¨Üœô¨Ð" (œô¨áœô¨Ûœô¨Þœô¨Òœô¨Þ)                         //
// ----------------------------------------------------------------------- //
// TableWordInFiles   œô¨áœô¨Þœô¨Þœô¨âœô¨Òœô¨Õœô¨âœô¨áœô¨âœô¨Òœô¨Øœô¨Õ œô¨áœô¨Ûœô¨Þœô¨Ò œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ðœô¨Ü œô¨Ø œô¨äœô¨Ûœô¨Ðœô¨Ó œô¨ßœô¨àœô¨Øœô¨Ýœô¨Ðœô¨Ôœô¨Ûœô¨Õœô¨Öœô¨Ýœô¨Þœô¨áœô¨âœô¨Ø œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ð //
//   IDword        INT            œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ð                             //
//   IDfile        INT            œô¨¸œô¨Ýœô¨Ôœô¨Õœô¨Úœô¨á œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð                             //
//   IsPath        BOOL           "œô¨¸œô¨Ôœô¨Øœô¨Þœô¨Üœô¨Ð" - œô¨çœô¨Ðœô¨áœô¨âœô¨ì œô¨ßœô¨ãœô¨âœô¨Ø?                   //
/////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
#ifdef __BCPLUSPLUS__
  #define __FUNCTION__ __FUNC__
  #define _itoa itoa

  #include <stdio.h>
#endif

#include "constants.h"
#include "CLog.h"
#include <string>
#include <list>
#include <map>
#include <windows.h>
#include <time.h>

#include <malloc.h>
#include <stdlib.h>

#define RESULT_OK 0

using namespace std;

// œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨Ø œô¨ßœô¨àœô¨Õœô¨Þœô¨Ñœô¨àœô¨Ðœô¨×œô¨ãœô¨îœô¨â œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨ßœô¨Þœô¨Ûœô¨Õœô¨Ù lFileTime œô¨Ø hFileTime œô¨Ò UTS œô¨Øœô¨Ûœô¨Ø œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨îœô¨â UTS, œô¨Õœô¨áœô¨Ûœô¨Ø œô¨Þœô¨Ý œô¨Ýœô¨Õ œô¨àœô¨Ðœô¨Òœô¨Õœô¨Ý 0
// œô¨²œô¨½œô¨¸œô¨¼œô¨°œô¨½œô¨¸œô¨µ!!! œô¨Õœô¨áœô¨Ûœô¨Ø œô¨ßœô¨Þœô¨Ûœô¨Õ UTS œô¨Ýœô¨Õ œô¨àœô¨Ðœô¨Òœô¨Ýœô¨Þ 0!!! œô¨âœô¨Þ œô¨Ò œô¨Ñœô¨Ðœô¨×œô¨ã œô¨Ñœô¨ãœô¨Ôœô¨Õœô¨â œô¨Òœô¨Ýœô¨Õœô¨áœô¨Õœô¨Ýœô¨Þ œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨íœô¨âœô¨Þœô¨Óœô¨Þ œô¨ßœô¨Þœô¨Ûœô¨ï
typedef struct FileDateTag
{
	time_t UTS;
} fileDate;

typedef struct FileStrTag
{
	string FileName;
	long long FileSize;
	fileDate FDate;
} fileStr;
typedef list<fileStr> filesStr;

typedef struct RecordTag
{
	string HostName;
	string IPNum;
	filesStr Files;
} hostRec;
typedef list<hostRec> hostRecords;

class CDBProvider
{
public:
	virtual ~CDBProvider(){};

///////////////////////////////////////////////////////////////////////////////
// AddFiles(hostRecords &aRec)
// œô¨´œô¨Þœô¨Ñœô¨Ðœô¨Òœô¨Ûœô¨ïœô¨Õœô¨â œô¨áœô¨ßœô¨Øœô¨áœô¨Þœô¨Ú œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Þœô¨Ò œô¨Ò œô¨±œô¨´
// aRec  œô¨áœô¨ßœô¨Øœô¨áœô¨Þœô¨Ú œô¨áœô¨Þœô¨Ôœô¨Õœô¨àœô¨Öœô¨Øœô¨â œô¨Øœô¨Üœô¨Õœô¨Ýœô¨Ð œô¨åœô¨Þœô¨áœô¨âœô¨Þœô¨Ò œô¨Ø œô¨áœô¨ßœô¨Øœô¨áœô¨Þœô¨Ú œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Þœô¨Ò œô¨Ôœô¨Ûœô¨ï œô¨Úœô¨Ðœô¨Öœô¨Ôœô¨Þœô¨Óœô¨Þ œô¨åœô¨Þœô¨áœô¨âœô¨Ð
// œô¨ßœô¨àœô¨Ø œô¨Ôœô¨Þœô¨Ñœô¨Ðœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨Ø œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Þœô¨Ò œô¨ßœô¨Þ œô¨ãœô¨Üœô¨Þœô¨Ûœô¨çœô¨Ðœô¨Ýœô¨Øœô¨î œô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Ðœô¨æœô¨Øœô¨ï œô¨ßœô¨Þ œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ðœô¨Ü œô¨Ýœô¨Õ œô¨ßœô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ôœô¨Øœô¨âœô¨áœô¨ï
// IsAutoIndex = false;
	virtual void AddFiles(hostRec &aRec)=0;

///////////////////////////////////////////////////////////////////////////////
// Search(const string& aText, map<string,bool> &aParams, hostRecords &Result)
// œô¨¿œô¨Þœô¨Øœô¨áœô¨Ú œô¨äœô¨àœô¨Ðœô¨×œô¨ë œô¨Ò œô¨±œô¨´
// aText   œô¨âœô¨Õœô¨Úœô¨áœô¨â œô¨Ôœô¨Ûœô¨ï œô¨ßœô¨Þœô¨Øœô¨áœô¨Úœô¨Ð
// aParams œô¨áœô¨ßœô¨Øœô¨áœô¨Þœô¨Ú œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò œô¨ßœô¨Þœô¨Øœô¨áœô¨Úœô¨Ð
// Result  œô¨áœô¨ßœô¨Øœô¨áœô¨Þœô¨Ú œô¨àœô¨Õœô¨×œô¨ãœô¨Ûœô¨ìœô¨âœô¨Ðœô¨âœô¨Þœô¨Ò
// œô¨Õœô¨áœô¨Ûœô¨Ø œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Ð IndexFind = false œô¨âœô¨Þ œô¨ßœô¨Þœô¨Øœô¨áœô¨Ú œô¨ßœô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ôœô¨Øœô¨â œô¨Ñœô¨Õœô¨× œô¨ßœô¨Þœô¨Øœô¨áœô¨Úœô¨Ð œô¨ßœô¨Þ
// œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ðœô¨Ü. œô¨¿œô¨àœô¨Ø œô¨íœô¨âœô¨Þœô¨Ü œô¨Òœô¨Òœô¨Õœô¨Ôœô¨Õœô¨Ýœô¨Ýœô¨Ðœô¨ï œô¨äœô¨àœô¨Ðœô¨×œô¨Ð œô¨Øœô¨éœô¨Õœô¨âœô¨áœô¨ï œô¨Ò œô¨áœô¨âœô¨àœô¨Þœô¨çœô¨Úœô¨Õ œô¨âœô¨Õœô¨Ûœô¨Õœô¨Úœô¨Þœô¨Ü.
// œô¨µœô¨áœô¨Ûœô¨Ø œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ IsAutoIndex = false œô¨âœô¨Þ œô¨ßœô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ôœô¨Øœô¨âœô¨ì œô¨ßœô¨Þœô¨Øœô¨áœô¨Ú œô¨á œô¨ãœô¨çœô¨Õœô¨âœô¨Þœô¨Ü œô¨áœô¨Ûœô¨Þœô¨Ò, œô¨Ýœô¨Õœô¨Ûœô¨ìœô¨×œô¨ï.
	virtual bool Search(const string& aText, map<string,bool> &aParams, hostRecords &Result)=0;

///////////////////////////////////////////////////////////////////////////////
// EraseHost(const string& aHostName, const string& aIPnum, time_t aDate, bool aOnlyFiles=false)
// œô¨Ãœô¨Ôœô¨Ðœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Õœô¨Ù œô¨Øœô¨× œô¨±œô¨´
// aHostName  œô¨¸œô¨Üœô¨ï œô¨åœô¨Þœô¨áœô¨âœô¨Ð
// aIPnum     IP œô¨Ýœô¨Þœô¨Üœô¨Õœô¨à
// aDate      œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨ïœô¨Õœô¨â œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø œô¨áœô¨âœô¨Ðœô¨àœô¨èœô¨Õ œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨Ýœô¨Þœô¨Ù œô¨Ôœô¨Ðœô¨âœô¨ë (œô¨Ôœô¨Ðœô¨âœô¨Ð œô¨Þœô¨Ñœô¨Ýœô¨Þœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨ï œô¨åœô¨Þœô¨áœô¨âœô¨Ð œô¨Üœô¨Õœô¨Ýœô¨ìœô¨èœô¨Õ œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨Ýœô¨Þœô¨Ù)
// aOnlyFiles œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨ïœô¨Õœô¨â œô¨âœô¨Þœô¨Ûœô¨ìœô¨Úœô¨Þ œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨ë, œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø œô¨Øœô¨× œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨ë œô¨åœô¨Þœô¨áœô¨âœô¨Þœô¨Ò œô¨Ýœô¨Õ œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨ïœô¨îœô¨âœô¨áœô¨ï
// œô¨¼œô¨Þœô¨Öœô¨Ýœô¨Þ œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨Òœô¨Ðœô¨âœô¨ì œô¨âœô¨Þœô¨Ûœô¨ìœô¨Úœô¨Þ œô¨ßœô¨Þ œô¨Þœô¨Ôœô¨Ýœô¨Þœô¨Üœô¨ã œô¨Øœô¨× œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Õœô¨Üœô¨âœô¨àœô¨Þœô¨Ò, œô¨Þœô¨áœô¨âœô¨Ðœô¨Ûœô¨ìœô¨Ýœô¨ëœô¨Õ œô¨ßœô¨Þœô¨Ûœô¨ï œô¨×œô¨Ðœô¨Ýœô¨ãœô¨Ûœô¨ïœô¨âœô¨ì
	virtual void EraseHost(const string& aHostName, const string& aIPnum, time_t aDate, bool aOnlyFiles=false)=0;

///////////////////////////////////////////////////////////////////////////////
// GetRefDateHost(const string& aHostName, const string& aIPnum)
// œô¨²œô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â œô¨Ôœô¨Ðœô¨âœô¨ã œô¨ßœô¨Þœô¨áœô¨Ûœô¨Õœô¨Ôœô¨Ýœô¨Õœô¨Ýœô¨Óœô¨Þ œô¨Þœô¨Ñœô¨Ýœô¨Þœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨ï œô¨Ò œô¨äœô¨Þœô¨àœô¨Üœô¨Ðœô¨âœô¨Õ time_t
// aHostName  œô¨¸œô¨Üœô¨ï œô¨åœô¨Þœô¨áœô¨âœô¨Ð
// aIPnum     IP œô¨Ýœô¨Þœô¨Üœô¨Õœô¨à
// œô¨¼œô¨Þœô¨Öœô¨Ýœô¨Þ œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨Òœô¨Ðœô¨âœô¨ì œô¨Þœô¨Ôœô¨Øœô¨Ý œô¨Øœô¨× œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò, œô¨Ýœô¨Þ œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨ì œô¨Ôœô¨Þœô¨Ûœô¨Öœô¨Ýœô¨Ð œô¨Ñœô¨ëœô¨âœô¨ì œô¨Þœô¨ßœô¨àœô¨Õœô¨Ôœô¨Õœô¨Ûœô¨Õœô¨Ýœô¨Ð œô¨Þœô¨Ôœô¨Ýœô¨Þœô¨×œô¨Ýœô¨Ðœô¨çœô¨Ýœô¨Þ
// œô¨µœô¨áœô¨Ûœô¨Ø œô¨ßœô¨Þ œô¨×œô¨Ðœô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Ü œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨ïœô¨Ü œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ýœô¨Þ œô¨Ñœô¨Þœô¨Ûœô¨Õœô¨Õ œô¨Þœô¨Ôœô¨Ýœô¨Þœô¨Ù œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø, œô¨âœô¨Þ œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨âœô¨áœô¨ï œô¨Òœô¨àœô¨Õœô¨Üœô¨ï
// œô¨âœô¨Þœô¨Ûœô¨ìœô¨Úœô¨Þ œô¨ßœô¨Õœô¨àœô¨Òœô¨Þœô¨Ù œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø
	virtual time_t GetRefDateHost(const string& aHostName, const string& aIPnum)=0;

///////////////////////////////////////////////////////////////////////////////
// GetNamePlugin()
// œô¨²œô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â œô¨Øœô¨Üœô¨ï œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Ð
  virtual char* GetNamePlugin()=0;

///////////////////////////////////////////////////////////////////////////////
// RefreshDB()
// œô¨¾œô¨ßœô¨âœô¨Øœô¨Üœô¨Øœô¨×œô¨Ðœô¨æœô¨Øœô¨ï œô¨±œô¨Ðœô¨×œô¨ë œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å, œô¨Þœô¨Ñœô¨Ýœô¨Þœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨áœô¨ßœô¨Øœô¨áœô¨Úœô¨Ð œô¨áœô¨Ûœô¨Þœô¨Ò œô¨Ø œô¨Øœô¨å œô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Þœô¨Ò
// œô¨¿œô¨¾œô¨ºœô¨° œô¨½œô¨µœô¨Àœô¨°œô¨±œô¨¾œô¨Âœô¨°œô¨µœô¨Â!!!
  virtual bool RefreshDB()=0;

///////////////////////////////////////////////////////////////////////////////
// GetProvError(string& mes)
// mes œô¨áœô¨âœô¨àœô¨Þœô¨Úœô¨Þœô¨Òœô¨Ðœô¨ï œô¨ßœô¨Õœô¨àœô¨Õœô¨Üœô¨Õœô¨Ýœô¨ï œô¨Ò œô¨Úœô¨Þœô¨âœô¨Þœô¨àœô¨ãœô¨î œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨âœô¨áœô¨ï œô¨âœô¨Õœô¨Úœô¨áœô¨â œô¨Þœô¨èœô¨Øœô¨Ñœô¨Úœô¨Ø
// œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ï œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â œô¨Úœô¨Þœô¨Ô œô¨Þœô¨èœô¨Øœô¨Ñœô¨Úœô¨Ø œô¨Øœô¨Ûœô¨Ø RESULT_OK œô¨Õœô¨áœô¨Ûœô¨Ø œô¨Þœô¨èœô¨Øœô¨Ñœô¨Úœô¨Ø œô¨Ýœô¨Õœô¨â
	virtual int GetProvError(string& mes)=0;

///////////////////////////////////////////////////////////////////////////////
// SetAutoIndex(bool aVal)
// aVal œô¨ãœô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Òœô¨Øœô¨âœô¨ì œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï œô¨Ðœô¨Òœô¨âœô¨Þœô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨ï
// œô¨°œô¨Òœô¨âœô¨Þœô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨Õ œô¨ãœô¨Úœô¨Ðœô¨×œô¨ëœô¨Òœô¨Ðœô¨Õœô¨â œô¨Ôœô¨Þœô¨Ñœô¨Ðœô¨Òœô¨Ûœô¨ïœô¨îœô¨âœô¨áœô¨ï œô¨Ûœô¨Ø œô¨áœô¨Ûœô¨Þœô¨Òœô¨Ð œô¨Ðœô¨Òœô¨âœô¨Þœô¨Üœô¨Ðœô¨âœô¨Øœô¨çœô¨Õœô¨áœô¨Úœô¨Ø œô¨Ò œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨ã œô¨áœô¨Ûœô¨Þœô¨Ò
// œô¨ßœô¨àœô¨Ø œô¨Ôœô¨Þœô¨Ñœô¨Ðœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨Ø œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Ð
//  virtual void __stdcall SetAutoIndex(bool aVal)=0;

///////////////////////////////////////////////////////////////////////////////
// IsAutoIndex()
// œô¨²œô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Õœô¨â œô¨×œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨Ðœô¨Òœô¨âœô¨Þœô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨ï
//  virtual bool __stdcall IsAutoIndex()=0;

///////////////////////////////////////////////////////////////////////////////
// StartIndexing(map<string,bool> &aParams)
// aParams œô¨×œô¨Ðœô¨àœô¨Õœô¨×œô¨Õœô¨àœô¨Òœô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Þ œô¨Ôœô¨Ûœô¨ï œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨çœô¨Ø œô¨ßœô¨Ðœô¨àœô¨Ðœô¨Üœô¨Õœô¨âœô¨àœô¨Þœô¨Ò
// œô¨¿œô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ôœô¨Øœô¨â œô¨Øœô¨Ýœô¨Ôœô¨Õœô¨Úœô¨áœô¨Øœô¨àœô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨ï œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Õœô¨Ù œô¨Øœô¨× œô¨âœô¨Ðœô¨Ñœô¨Ûœô¨Øœô¨æœô¨ë œô¨äœô¨Ðœô¨Ùœô¨Ûœô¨Þœô¨Ò
// œô¨²œô¨Àœô¨µœô¨¼œô¨µœô¨½œô¨¾ œô¨½œô¨µ œô¨Àœô¨°œô¨±œô¨¾œô¨Âœô¨°œô¨µœô¨Â!!!!!!!!!
//  virtual void __stdcall StartIndexing(map<string,bool> &aParams)=0;
};

class CPrvException
{
	char *strError;
	int codeError;
	public:
		CPrvException(const char* aText, int aLine=0, const char* aFunct=NULL, const int aErrCode=-1)
		{
			codeError = aErrCode;
			int iSize = (int)strlen(aText)+1;
			int i=0;
			if( aLine != 0 ) iSize += 15;
			if( aFunct != NULL ) iSize += (int)strlen(aFunct)+3;
			iSize += 5; // œô¨Ýœô¨Ð œô¨Òœô¨áœô¨ïœô¨Úœô¨Øœô¨Ù œô¨áœô¨Ûœô¨ãœô¨çœô¨Ðœô¨Ù :)
			strError = new char[iSize];
			if( aFunct != NULL ) i += sprintf(strError + i, "%s->", aFunct);
			if( aLine != 0 ) i += sprintf(strError + i, "[%d] ", aLine);
			i += sprintf(strError + i, "%s ", aText);
			Log::instance().Trace( 5,"%s", strError );
		}
		//-------------------------------------------------------------------------
		CPrvException(std::exception& e, int aLine=0, const char* aFunct=NULL, const int aErrCode=-1)
		{
			codeError = aErrCode;
			const char* tmp = e.what();
			int iSize = (int)strlen(tmp)+1;
			int i=0;
			if( aLine != 0 ) iSize += 15;
			if( aFunct != NULL ) iSize += (int)strlen(aFunct)+3;
			iSize += 5; // œô¨Ýœô¨Ð œô¨Òœô¨áœô¨ïœô¨Úœô¨Øœô¨Ù œô¨áœô¨Ûœô¨ãœô¨çœô¨Ðœô¨Ù :)
			strError = new char[iSize];
			if( aFunct != NULL ) i += sprintf(strError + i, "%s->", aFunct);
			if( aLine != 0 ) i += sprintf(strError + i, "[%d] ", aLine);
			i += sprintf(strError + i, "%s ", tmp);
			Log::instance().Trace( 5,"%s", strError );
		}
		//-------------------------------------------------------------------------
		virtual ~CPrvException()
		{
			if( strError )
			{
				delete[] strError;
				strError = NULL;
			}
		}
		//-------------------------------------------------------------------------
		const char* Message()
		{
			return strError;
		}
		//-------------------------------------------------------------------------
		int ErrorCode()
		{
			return codeError;
		}
		//-------------------------------------------------------------------------
};

#endif /*CDBPROVIDER_H_*/
