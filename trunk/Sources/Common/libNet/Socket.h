//-------------------------------------------------------------------------------------
//œô¨Íœô¨âœô¨Þœô¨â œô¨äœô¨Ðœô¨Ùœô¨Û œô¨ïœô¨Òœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨çœô¨Ðœô¨áœô¨âœô¨ìœô¨î œô¨ßœô¨àœô¨Þœô¨Õœô¨Úœô¨âœô¨Ð Exspecto 2006œô¨Ó.
//Module: CSocket class
//Author: Parshin Dmitry
//Description: œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á, œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨éœô¨Øœô¨Ù œô¨Òœô¨×œô¨Ðœô¨Øœô¨Üœô¨Þœô¨Ôœô¨Õœô¨Ùœô¨áœô¨âœô¨Òœô¨Øœô¨Õ œô¨á œô¨áœô¨Þœô¨Úœô¨Õœô¨âœô¨Ðœô¨Üœô¨Ø (œô¨Þœô¨Ñœô¨éœô¨Ðœô¨ï œô¨Ôœô¨Ûœô¨ï œô¨Úœô¨Ûœô¨Øœô¨Õœô¨Ýœô¨âœô¨Ð œô¨Ø œô¨áœô¨Õœô¨àœô¨Òœô¨Õœô¨àœô¨Ð œô¨çœô¨Ðœô¨áœô¨âœô¨ì)
//-------------------------------------------------------------------------------------

#ifndef CSOCKET_H_
#define CSOCKET_H_

#include "Singleton.hpp"
#include <stdexcept>
#include "CLog.h"
#ifdef WIN32
#include "winsock2.h"
#define socklen_t int
#define ioctl ioctlsocket
#else
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/ioctl.h>
#include <netdb.h>
#include <arpa/inet.h>
#define INVALID_SOCKET -1
#define SOCKET_ERROR -1
#define WSAEMSGSIZE EMSGSIZE
#define WSAEINTR EINTR
#define WSAHOST_NOT_FOUND HOST_NOT_FOUND
typedef int SOCKET;
#endif
#include "Os_Spec.h"


//œô¨¸œô¨áœô¨Úœô¨Ûœô¨îœô¨çœô¨Õœô¨Ýœô¨Øœô¨ï, œô¨Óœô¨Õœô¨Ýœô¨Õœô¨àœô¨Øœô¨àœô¨ãœô¨Õœô¨Üœô¨ëœô¨Õ CSocket œô¨Ø œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Ðœô¨Üœô¨Ø, œô¨Ýœô¨Ðœô¨áœô¨Ûœô¨Õœô¨Ôœô¨ãœô¨îœô¨éœô¨Øœô¨Üœô¨Ø œô¨Þœô¨â œô¨Ýœô¨Õœô¨Óœô¨Þ, œô¨Ø œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ïœô¨Üœô¨Ø œô¨Øœô¨× Tools
class SocketErr: public std::exception
{
public:
	SocketErr( int iLastError )
	{
	    #ifdef WIN32
		if( 0 == FormatMessage( FORMAT_MESSAGE_FROM_SYSTEM, NULL, iLastError, 0, data, sizeof(data), NULL ) )
		#else
		if( 0 == strerror_r( errno, data, sizeof( data ) ) )
		#endif
		{
			strcpy( data, "Error during formating error message" );
			#ifdef WIN32
			Log::instance().Trace( 0, "SocketErr: œô¨Þœô¨èœô¨Øœô¨Ñœô¨Úœô¨Ð: %d", GetLastError() );
			#else
			Log::instance().Trace( 0, "SocketErr: œô¨Þœô¨èœô¨Øœô¨Ñœô¨Úœô¨Ð: %d", errno );
			#endif
		}
	};

	SocketErr( const std::string& Msg )
	{
		strcpy( data, Msg.c_str() );
	};

	virtual ~SocketErr()throw(){};

	virtual const char* what() const throw()
	{
		return data;
	};

private:

	char data[1024];
};


class CSocket
{
public:


	class SocketDNSErr: public SocketErr
	{
		public:
        SocketDNSErr():SocketErr( "œô¨°œô¨Ôœô¨àœô¨Õœô¨á œô¨Ýœô¨Õ œô¨Ýœô¨Ðœô¨Ùœô¨Ôœô¨Õœô¨Ý" ){};
		virtual ~SocketDNSErr()throw(){};
	};

	class SocketRespSizeErr: public SocketErr
	{
		public:
			SocketRespSizeErr():SocketErr( "œô¨Àœô¨Ðœô¨×œô¨Üœô¨Õœô¨à œô¨Þœô¨âœô¨Òœô¨Õœô¨âœô¨Ð œô¨áœô¨Ûœô¨Øœô¨èœô¨Úœô¨Þœô¨Ü œô¨Òœô¨Õœô¨Ûœô¨Øœô¨Ú" ){};
		virtual ~SocketRespSizeErr()throw(){};
	};

	class SocketConnectionLost: public SocketErr
	{
		public:
			SocketConnectionLost():SocketErr( "œô¨Àœô¨Ðœô¨×œô¨àœô¨ëœô¨Ò œô¨áœô¨Òœô¨ïœô¨×œô¨Ø" ){};
		virtual ~SocketConnectionLost()throw(){};
	};

	//œô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨ãœô¨àœô¨Ð, œô¨Þœô¨ßœô¨Øœô¨áœô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Ðœô¨ï œô¨Ðœô¨Ôœô¨àœô¨Õœô¨á œô¨Úœô¨Þœô¨Üœô¨ßœô¨ìœô¨îœô¨âœô¨Õœô¨àœô¨Ð œô¨Ò œô¨áœô¨Õœô¨âœô¨Ø
	struct structAddr
	{
		std::string strAddr;
		std::string strName;
		int iPort;
	};


	//œô¨ºœô¨Þœô¨Ýœô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨Þœô¨à, iType - œô¨âœô¨Øœô¨ß œô¨áœô¨Þœô¨Úœô¨Õœô¨âœô¨Ð,œô¨Üœô¨Þœô¨Öœô¨Õœô¨â œô¨Ñœô¨ëœô¨âœô¨ì SOCK_STREAM/SOCK_DGRAM
	//			   bBlocking - œô¨âœô¨Øœô¨ß œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò, œô¨ßœô¨Þ œô¨ãœô¨Üœô¨Þœô¨Ûœô¨çœô¨Ðœô¨Ýœô¨Øœô¨î - œô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ
	CSocket( int iType = SOCK_STREAM, bool bBlocking = true );

	//œô¨ºœô¨Þœô¨Ýœô¨áœô¨âœô¨àœô¨ãœô¨Úœô¨âœô¨Þœô¨à, s - œô¨áœô¨Þœô¨×œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Ù œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨Õœô¨Ù ::socket œô¨áœô¨Þœô¨Úœô¨Õœô¨â
	//			   bBlocking - œô¨âœô¨Øœô¨ß œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò, œô¨ßœô¨Þ œô¨ãœô¨Üœô¨Þœô¨Ûœô¨çœô¨Ðœô¨Ýœô¨Øœô¨î - œô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ
	CSocket( SOCKET s, bool bBlocking, bool bConnected );

	virtual ~CSocket(void);

	//œô¨¼œô¨Õœô¨âœô¨Þœô¨Ô œô¨×œô¨Ðœô¨Úœô¨àœô¨ëœô¨âœô¨Øœô¨ï œô¨áœô¨Þœô¨Úœô¨Õœô¨âœô¨Ð
    void Close( void );

	//œô¨¼œô¨Õœô¨âœô¨Þœô¨Ô œô¨ßœô¨Þœô¨áœô¨ëœô¨Ûœô¨Úœô¨Ø œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å,œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â œô¨Úœô¨Þœô¨Û-œô¨Òœô¨Þ œô¨Þœô¨âœô¨ßœô¨àœô¨Ðœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Ýœô¨ëœô¨å œô¨Ñœô¨Ðœô¨Ùœô¨â
	void Send( void* pBuffer, int iSize );

	//œô¨¼œô¨Õœô¨âœô¨Þœô¨Ô œô¨ßœô¨àœô¨Øœô¨ñœô¨Üœô¨Ð œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å,œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â œô¨Úœô¨Þœô¨Û-œô¨Òœô¨Þ œô¨ßœô¨àœô¨Øœô¨Ýœô¨ïœô¨âœô¨ëœô¨å œô¨Ñœô¨Ðœô¨Ùœô¨â
	int Receive( void* pBuffer, int iBufSize );

	//œô¨¼œô¨Õœô¨âœô¨Þœô¨Ô œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨éœô¨Ðœô¨Õœô¨â œô¨Ðœô¨Ôœô¨àœô¨Õœô¨á œô¨ãœô¨Ôœô¨Ðœô¨Ûœô¨Õœô¨Ýœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨åœô¨Þœô¨áœô¨âœô¨Ð
	structAddr GetRemoteHost();

	//œô¨¼œô¨Õœô¨âœô¨Þœô¨Ô, œô¨ãœô¨áœô¨âœô¨Ðœô¨Ýœô¨Ðœô¨Òœô¨Ûœô¨Øœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨âœô¨Øœô¨ß œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò(true - œô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ,false - œô¨Ýœô¨Õœô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ )
	void SetBlocking( bool bIsBlocking );

	bool IsConnected()const;

	//œô¨¿œô¨àœô¨Ø œô¨Øœô¨áœô¨ßœô¨Þœô¨Ûœô¨ìœô¨×œô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨Ø œô¨Ýœô¨Õœô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨å œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò, œô¨Üœô¨Õœô¨âœô¨Þœô¨Ô œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â true,œô¨Õœô¨áœô¨Ûœô¨Ø œô¨Ò œô¨ßœô¨àœô¨Øœô¨Õœô¨Üœô¨Ýœô¨ëœô¨Ù œô¨Ñœô¨ãœô¨äœô¨Õœô¨à
	//œô¨ßœô¨Þœô¨áœô¨âœô¨ãœô¨ßœô¨Øœô¨Ûœô¨Ø œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨Õ œô¨Ø œô¨Üœô¨Þœô¨Öœô¨Ýœô¨Þ œô¨ßœô¨àœô¨Þœô¨Øœô¨×œô¨Òœô¨Þœô¨Ôœô¨Øœô¨âœô¨ì œô¨Þœô¨ßœô¨Õœô¨àœô¨Ðœô¨æœô¨Øœô¨î Receive
	//Timeout - œô¨Òœô¨àœô¨Õœô¨Üœô¨ï œô¨Þœô¨Öœô¨Øœô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨ï (œô¨Üœô¨Úœô¨á),œô¨Õœô¨áœô¨Ûœô¨Ø -1,œô¨Ñœô¨Õœô¨áœô¨Úœô¨Þœô¨Ýœô¨Õœô¨çœô¨Ýœô¨Þœô¨Õ œô¨Þœô¨Öœô¨Øœô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨Õ
	bool IsReadyForRead( int iTimeout = -1 );

	//œô¨¿œô¨àœô¨Ø œô¨Øœô¨áœô¨ßœô¨Þœô¨Ûœô¨ìœô¨×œô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Øœô¨Ø œô¨Ýœô¨Õœô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨å œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò, œô¨Üœô¨Õœô¨âœô¨Þœô¨Ô œô¨Òœô¨Þœô¨×œô¨Òœô¨àœô¨Ðœô¨éœô¨Ðœô¨Õœô¨â true,œô¨Õœô¨áœô¨Ûœô¨Ø œô¨áœô¨Þœô¨Úœô¨Õœô¨â œô¨Óœô¨Þœô¨âœô¨Þœô¨Ò œô¨Ú
	//œô¨×œô¨Ðœô¨ßœô¨Øœô¨áœô¨Ø
	//Timeout - œô¨Òœô¨àœô¨Õœô¨Üœô¨ï œô¨Þœô¨Öœô¨Øœô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨ï (œô¨Üœô¨Úœô¨á),œô¨Õœô¨áœô¨Ûœô¨Ø -1,œô¨Ñœô¨Õœô¨áœô¨Úœô¨Þœô¨Ýœô¨Õœô¨çœô¨Ýœô¨Þœô¨Õ œô¨Þœô¨Öœô¨Øœô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨Õ
	bool IsReadyForWrite( int iTimeout = -1 );

	//œô¨¿œô¨Þœô¨Ûœô¨ãœô¨çœô¨Øœô¨âœô¨ì œô¨àœô¨Ðœô¨×œô¨Üœô¨Õœô¨à œô¨Ôœô¨Ðœô¨Ýœô¨Ýœô¨ëœô¨å œô¨Ò œô¨Ñœô¨ãœô¨äœô¨Õœô¨àœô¨Õ
	bool GetPendingDataSize( u_long& ulSize );

protected:

	void SetConnected( bool bConnected );

	//œô¨´œô¨Õœô¨áœô¨Úœô¨àœô¨Øœô¨ßœô¨âœô¨Þœô¨à œô¨áœô¨Þœô¨Úœô¨Õœô¨âœô¨Ð, œô¨Øœô¨áœô¨ßœô¨Þœô¨Ûœô¨ìœô¨×œô¨ãœô¨Õœô¨Üœô¨ëœô¨Ù œô¨ßœô¨àœô¨Ðœô¨Úœô¨âœô¨Øœô¨çœô¨Õœô¨áœô¨Úœô¨Ø œô¨Òœô¨Þ œô¨Òœô¨áœô¨Õœô¨å œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨ïœô¨å
	SOCKET m_Socket;

	//œô¨Äœô¨Ûœô¨Ðœô¨Ó,œô¨ãœô¨Úœô¨Ðœô¨×œô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨Ýœô¨Ð œô¨âœô¨Øœô¨ß œô¨Øœô¨áœô¨ßœô¨Þœô¨Ûœô¨ìœô¨×œô¨ãœô¨Õœô¨Üœô¨ëœô¨å œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Þœô¨Ò (œô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ/œô¨Ýœô¨Õœô¨Ñœô¨Ûœô¨Þœô¨Úœô¨Øœô¨àœô¨ãœô¨îœô¨éœô¨Øœô¨Õ)
	bool m_bBlocking;

	//œô¨Âœô¨Øœô¨ß œô¨áœô¨Þœô¨Úœô¨Õœô¨âœô¨Ð
	int m_iType;

private:

	CSocket( const CSocket& );
	CSocket& operator=( const CSocket& );

	bool m_bConnected;
};


#endif
