//-------------------------------------------------------------------------------------//
//œô¨Íœô¨âœô¨Þœô¨â œô¨äœô¨Ðœô¨Ùœô¨Û œô¨ïœô¨Òœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨çœô¨Ðœô¨áœô¨âœô¨ìœô¨î œô¨ßœô¨àœô¨Þœô¨Õœô¨Úœô¨âœô¨Ð Exspecto 2006œô¨Ó.
//Module: CStartTrigger interface and CCron, CTimer, CCalendar implementations
//Author: Parshin Dmitry
//Description: œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á, œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨éœô¨Øœô¨Ù œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨Ø œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨àœô¨Ð œô¨Ôœô¨Ûœô¨ï œô¨ßœô¨Ûœô¨Ðœô¨Ýœô¨Øœô¨àœô¨Þœô¨Òœô¨éœô¨Øœô¨Úœô¨Ð CScheduler
//-------------------------------------------------------------------------------------//
#ifndef CSTARTTRIGGER_H_
#define CSTARTTRIGGER_H_

#include "CScheduler.h"


//œô¨¿œô¨àœô¨Õœô¨Ôœô¨Òœô¨Ðœô¨àœô¨Øœô¨âœô¨Õœô¨Ûœô¨ìœô¨Ýœô¨Þœô¨Õ œô¨Þœô¨Ñœô¨ìœô¨ïœô¨Òœô¨Ûœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨Úœô¨Ûœô¨Ðœô¨áœô¨áœô¨Ð CStartScanEventInterface
class CStartScanEventInterface;

//œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á, œô¨Þœô¨ßœô¨Øœô¨áœô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨Øœô¨Ýœô¨âœô¨Õœô¨àœô¨äœô¨Õœô¨Ùœô¨á œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨àœô¨Ð œô¨Ôœô¨Ûœô¨ï œô¨ßœô¨Ûœô¨Ðœô¨Ýœô¨Øœô¨àœô¨Þœô¨Òœô¨éœô¨Øœô¨Úœô¨Ð CScheduler
class CStartTrigger
{
public:
	//œô¨Âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨à œô¨áœô¨Þœô¨×œô¨Ôœô¨Ðœô¨Õœô¨âœô¨áœô¨ï œô¨á œô¨ãœô¨Úœô¨Ðœô¨×œô¨Ðœô¨âœô¨Õœô¨Ûœô¨Õœô¨Ü œô¨Ýœô¨Ð œô¨Øœô¨Ýœô¨âœô¨Õœô¨àœô¨äœô¨Õœô¨Ùœô¨á œô¨Þœô¨Ñœô¨àœô¨Ðœô¨âœô¨Ýœô¨Þœô¨Óœô¨Þ œô¨Òœô¨ëœô¨×œô¨Þœô¨Òœô¨Ð,
	//œô¨Úœô¨Þœô¨âœô¨Þœô¨àœô¨Þœô¨Üœô¨ã œô¨Ñœô¨ãœô¨Ôœô¨Õœô¨â œô¨ßœô¨Õœô¨àœô¨Õœô¨Ôœô¨Ðœô¨Òœô¨Ðœô¨âœô¨ìœô¨áœô¨ï œô¨áœô¨Þœô¨Ñœô¨ëœô¨âœô¨Øœô¨Õ
	CStartTrigger( CStartScanEventInterface* pCallBack );
	virtual ~CStartTrigger();
	
	//œô¨½œô¨Ðœô¨çœô¨Ðœô¨Ûœô¨Þ œô¨àœô¨Ðœô¨Ñœô¨Þœô¨âœô¨ë œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨àœô¨Ð
	virtual void Start() = 0;
	
	//œô¨¾œô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Ò œô¨Ø œô¨áœô¨Ñœô¨àœô¨Þœô¨á œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨àœô¨Ð
	virtual void Stop() = 0;
	
protected:
	
	CStartScanEventInterface* m_pCallBack;
	
};

//œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á,œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨èœô¨Øœô¨Ù œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨à, œô¨áœô¨àœô¨Ðœô¨Ñœô¨Ðœô¨âœô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨ßœô¨Õœô¨àœô¨Øœô¨Þœô¨Ôœô¨Øœô¨çœô¨Õœô¨áœô¨Úœô¨Ø œô¨ßœô¨Þ œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨ã
//œô¨·œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨ßœô¨Õœô¨àœô¨Øœô¨Þœô¨Ôœô¨Ð œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð œô¨Ñœô¨Õœô¨àœô¨Õœô¨âœô¨áœô¨ï œô¨Øœô¨× œô¨ãœô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Òœô¨Þœô¨Ú
class CTimer: public CStartTrigger
{
public:

	CTimer( CStartScanEventInterface* pCallBack );
	~CTimer();
	
	//œô¨·œô¨Ðœô¨ßœô¨ãœô¨áœô¨âœô¨Øœô¨âœô¨ì œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨à
	void Start();
	
	//œô¨¾œô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Òœô¨Øœô¨âœô¨ì œô¨Ø œô¨áœô¨Ñœô¨àœô¨Þœô¨áœô¨Øœô¨âœô¨ì œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨à
	void Stop();

private:
	CTimer( const CTimer& );
	CTimer& operator=( const CTimer& );
	
	//œô¨´œô¨Õœô¨áœô¨Úœô¨àœô¨Øœô¨ßœô¨âœô¨Þœô¨à œô¨ßœô¨Þœô¨âœô¨Þœô¨Úœô¨Ð œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
	CThread m_Thread;
	
	//œô¨´œô¨Õœô¨áœô¨Úœô¨àœô¨Øœô¨ßœô¨âœô¨Þœô¨à œô¨áœô¨Þœô¨Ñœô¨ëœô¨âœô¨Øœô¨ï, œô¨Þœô¨áœô¨âœô¨Ðœô¨Ýœô¨Ðœô¨Òœô¨Ûœô¨Øœô¨Òœô¨Ðœô¨îœô¨éœô¨Õœô¨Óœô¨Þ œô¨ßœô¨Þœô¨âœô¨Þœô¨Ú œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
	CEvent m_CancelEv;
	
	//œô¨·œô¨Ýœô¨Ðœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ œô¨ßœô¨Õœô¨àœô¨Øœô¨Þœô¨Ôœô¨Ð œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
	int m_iTimerValue;
	
	//œô¨¿œô¨Þœô¨âœô¨Þœô¨Ú œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
	class CTimerThreadTask: public CThreadTask
	{
	public:

	CTimerThreadTask( CTimer* pTimer):
	  m_pTimer( pTimer )
	  {}
		  
	  virtual void Execute( CEvent& CancelEv );

	private:
		  
	  CTimer* m_pTimer;
	};

 
};

//œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á,œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨èœô¨Øœô¨Ù œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨à, œô¨áœô¨àœô¨Ðœô¨Ñœô¨Ðœô¨âœô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨ßœô¨Þ œô¨áœô¨Þœô¨Ñœô¨ëœô¨âœô¨Øœô¨î œô¨Þœô¨â œô¨Òœô¨Ýœô¨Õœô¨èœô¨Ýœô¨Õœô¨Ù œô¨ßœô¨àœô¨Þœô¨Óœô¨àœô¨Ðœô¨Üœô¨Üœô¨ë 
class CCron: public CStartTrigger
{
public:

	CCron( CStartScanEventInterface* pCallBack );
	~CCron();
	
	void Start();
	
	void Stop();
private:
	CCron( const CCron& );
	CCron& operator=( const CCron& );
};

//œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á,œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨èœô¨Øœô¨Ù œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨à, œô¨áœô¨àœô¨Ðœô¨Ñœô¨Ðœô¨âœô¨ëœô¨Òœô¨Ðœô¨îœô¨éœô¨Øœô¨Ù œô¨ßœô¨Þ œô¨àœô¨Ðœô¨áœô¨ßœô¨Øœô¨áœô¨Ðœô¨Ýœô¨Øœô¨î
class CCalendar: public CStartTrigger
{
public:

	CCalendar( CStartScanEventInterface* pCallBack );
	~CCalendar();
	
	void Start();
	
	void Stop();
private:
	CCalendar( const CCalendar& );
	CCalendar& operator=( const CCalendar& );
};

#endif /*CSTARTTRIGGER_H_*/
