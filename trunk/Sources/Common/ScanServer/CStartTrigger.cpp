//-------------------------------------------------------------------------------------//
//œô¨Íœô¨âœô¨Þœô¨â œô¨äœô¨Ðœô¨Ùœô¨Û œô¨ïœô¨Òœô¨Ûœô¨ïœô¨Õœô¨âœô¨áœô¨ï œô¨çœô¨Ðœô¨áœô¨âœô¨ìœô¨î œô¨ßœô¨àœô¨Þœô¨Õœô¨Úœô¨âœô¨Ð Exspecto 2006œô¨Ó.
//Module: CStartTrigger interface and CCron, CTimer, CCalendar implementations
//Author: Parshin Dmitry
//Description: œô¨ºœô¨Ûœô¨Ðœô¨áœô¨á, œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨ãœô¨îœô¨éœô¨Øœô¨Ù œô¨äœô¨ãœô¨Ýœô¨Úœô¨æœô¨Øœô¨Ø œô¨âœô¨àœô¨Øœô¨Óœô¨Óœô¨Õœô¨àœô¨Ð œô¨Ôœô¨Ûœô¨ï œô¨ßœô¨Ûœô¨Ðœô¨Ýœô¨Øœô¨àœô¨Þœô¨Òœô¨éœô¨Øœô¨Úœô¨Ð CScheduler
//-------------------------------------------------------------------------------------//
#include "precomp.h"
#include "CStartTrigger.h"

//------------------------------------------------------------------------------------------------------
//-----------------------------------CStartTrigger Implementation---------------------------------------
//------------------------------------------------------------------------------------------------------
CStartTrigger::CStartTrigger( CStartScanEventInterface* pCallBack ):m_pCallBack( pCallBack )
{
}

CStartTrigger::~CStartTrigger()
{
}

//------------------------------------------------------------------------------------------------------
//-----------------------------------CTimer Implementation----------------------------------------------
//------------------------------------------------------------------------------------------------------
CTimer::CTimer( CStartScanEventInterface* pCallBack ):CStartTrigger( pCallBack )
													 ,m_Thread( SmartPtr<CThreadTask>( new CTimerThreadTask( this ) ), false )
{
	Log::instance().Trace( 90, "CTimer: œô¨áœô¨Þœô¨×œô¨Ôœô¨Ðœô¨Ýœô¨Øœô¨Õ" );
	Settings::instance().GetParam( TIMER_VALUE, m_iTimerValue );
	Log::instance().Trace( 90, "CTimer: œô¨ßœô¨Õœô¨àœô¨Øœô¨Þœô¨Ô œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð: %d œô¨á", m_iTimerValue );
}

CTimer::~CTimer()
{
	Log::instance().Trace( 90, "CTimer: œô¨ãœô¨Ýœô¨Øœô¨çœô¨âœô¨Þœô¨Öœô¨Õœô¨Ýœô¨Øœô¨Õ" );
	//œô¨¾œô¨áœô¨âœô¨Ðœô¨Ýœô¨Ðœô¨Òœô¨Ûœô¨Øœô¨Òœô¨Ðœô¨Õœô¨Ü œô¨áœô¨Ûœô¨ãœô¨Öœô¨Õœô¨Ñœô¨Ýœô¨ëœô¨Ù œô¨ßœô¨Þœô¨âœô¨Þœô¨Ú œô¨ßœô¨Õœô¨àœô¨Õœô¨Ô œô¨ãœô¨Ýœô¨Øœô¨çœô¨âœô¨Þœô¨Öœô¨Õœô¨Ýœô¨Øœô¨Õœô¨Ü
	Stop();
}

//œô¨·œô¨Ðœô¨ßœô¨ãœô¨áœô¨âœô¨Øœô¨âœô¨ì œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨à	
void CTimer::Start()
{
	//œô¨¾œô¨áœô¨âœô¨Ðœô¨Ýœô¨Ðœô¨Òœô¨Ûœô¨Øœô¨Òœô¨Ðœô¨Õœô¨Ü œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨à
	Stop();
	Log::instance().Trace( 90, "CTimer: œô¨áœô¨âœô¨Ðœô¨àœô¨â" );
	//œô¨·œô¨Ðœô¨ßœô¨ãœô¨áœô¨Úœô¨Ðœô¨Õœô¨Ü œô¨áœô¨Ûœô¨ãœô¨Öœô¨Õœô¨Ñœô¨Ýœô¨ëœô¨Ù œô¨ßœô¨Þœô¨âœô¨Þœô¨Ú œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
	m_Thread.Start();
}

//œô¨¾œô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Òœô¨Øœô¨âœô¨ì œô¨Ø œô¨áœô¨Ñœô¨àœô¨Þœô¨áœô¨Øœô¨âœô¨ì œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨à	
void CTimer::Stop()
{
	Log::instance().Trace( 90, "CTimer: œô¨áœô¨âœô¨Þœô¨ß" );
	//œô¨µœô¨áœô¨Ûœô¨Ø œô¨ßœô¨Þœô¨âœô¨Þœô¨Ú œô¨×œô¨Ðœô¨ßœô¨ãœô¨éœô¨Õœô¨Ý
	if( m_Thread.IsWorking() )
	{
	  //œô¨âœô¨Þ œô¨Þœô¨áœô¨âœô¨Ðœô¨Ýœô¨Ðœô¨Òœô¨Ûœô¨Øœô¨Òœô¨Ðœô¨Õœô¨Ü œô¨Õœô¨Óœô¨Þ
	  m_CancelEv.Set();
	}
}

//œô¨¿œô¨Þœô¨âœô¨Þœô¨Ú œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
void CTimer::CTimerThreadTask::Execute( CEvent& CancelEv )
{
	//TODO: œô¨Íœô¨âœô¨Þœô¨â try catch œô¨Ýœô¨Øœô¨çœô¨Õœô¨Óœô¨Þ œô¨Ýœô¨Õ œô¨Ûœô¨Þœô¨Òœô¨Øœô¨â œô¨Ò gcc
	//œô¨Þœô¨Ñœô¨àœô¨Ðœô¨Ñœô¨Þœô¨âœô¨Úœô¨Ð œô¨Øœô¨áœô¨Úœô¨Ûœô¨îœô¨çœô¨Õœô¨Ýœô¨Øœô¨Ù œô¨àœô¨Õœô¨Ðœô¨Ûœô¨Øœô¨×œô¨Þœô¨Òœô¨Ðœô¨Ýœô¨Ð œô¨Òœô¨Ýœô¨ãœô¨âœô¨àœô¨Ø CScheduler::OnStartScan
	try{
		m_pTimer->m_pCallBack->OnStartScan();
		for(;;)
		{
			//œô¨¾œô¨Öœô¨Øœô¨Ôœô¨Ðœô¨Õœô¨Ü œô¨Ûœô¨Øœô¨Ñœô¨Þ œô¨Þœô¨âœô¨Üœô¨Õœô¨Ýœô¨ë(œô¨Þœô¨áœô¨âœô¨Ðœô¨Ýœô¨Þœô¨Ò œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð) œô¨Ûœô¨Øœô¨Ñœô¨Þ œô¨Òœô¨ëœô¨åœô¨Þœô¨Ôœô¨Ð œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Ðœô¨ãœô¨âœô¨Ð, œô¨Úœô¨Þœô¨âœô¨Þœô¨àœô¨ëœô¨Ù œô¨×œô¨Ðœô¨Ôœô¨Ðœô¨Õœô¨â œô¨ßœô¨Õœô¨àœô¨Øœô¨Þœô¨Ô œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð
		  if( m_pTimer->m_CancelEv.Wait( m_pTimer->m_iTimerValue*1000 ) )
			break;
		  Log::instance().Trace( 95, "CTimer: œô¨áœô¨Þœô¨Ñœô¨ëœô¨âœô¨Øœô¨Õ œô¨âœô¨Ðœô¨Ùœô¨Üœô¨Õœô¨àœô¨Ð" );
		  //œô¨²œô¨ëœô¨×œô¨ëœô¨Òœô¨Ðœô¨Õœô¨Ü œô¨Þœô¨Ñœô¨àœô¨Ðœô¨Ñœô¨Þœô¨âœô¨çœô¨Øœô¨Ú œô¨Ò œô¨ßœô¨Ûœô¨Ðœô¨Ýœô¨Øœô¨àœô¨Þœô¨Òœô¨éœô¨Øœô¨Úœô¨Õ œô¨Ø œô¨Öœô¨Ôœô¨Õœô¨Ü œô¨Õœô¨Óœô¨Þ œô¨Þœô¨âœô¨àœô¨Ðœô¨Ñœô¨Þœô¨âœô¨Úœô¨Ø
		  m_pTimer->m_pCallBack->OnStartScan();
		}
	}catch( std::exception& e )
	{
		Log::instance().Trace( 0, "CTimer::fnTimerProc: œô¨²œô¨Þœô¨×œô¨Ýœô¨Øœô¨Úœô¨Ûœô¨Þ œô¨Øœô¨áœô¨Úœô¨Ûœô¨îœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ: %s" , e.what() );
	}catch( ... )
	{
		Log::instance().Trace( 10,"CTimer::fnTimerProc: œô¨²œô¨Þœô¨×œô¨Ýœô¨Øœô¨Úœô¨Ûœô¨Þ œô¨Ýœô¨Õœô¨Øœô¨×œô¨Òœô¨Õœô¨áœô¨âœô¨Ýœô¨Þœô¨Õ œô¨Øœô¨áœô¨Úœô¨Ûœô¨îœô¨çœô¨Õœô¨Ýœô¨Øœô¨Õ" );
	}
	Log::instance().Trace( 10,"CTimer::fnTimerProc: œô¨·œô¨Ðœô¨Úœô¨àœô¨ëœô¨âœô¨Øœô¨Õ" );
}

//------------------------------------------------------------------------------------------------------
//-----------------------------------CCron Implementation-----------------------------------------------
//------------------------------------------------------------------------------------------------------
CCron::CCron( CStartScanEventInterface* pCallBack ):CStartTrigger( pCallBack )
{
}

CCron::~CCron()
{
}
	
void CCron::Start()
{
}
	
void CCron::Stop()
{
}

//------------------------------------------------------------------------------------------------------
//----------------------------------CCalendar Implementation--------------------------------------------
//------------------------------------------------------------------------------------------------------
CCalendar::CCalendar( CStartScanEventInterface* pCallBack ):CStartTrigger( pCallBack )
{
}

CCalendar::~CCalendar()
{
}
	
void CCalendar::Start()
{
}
	
void CCalendar::Stop()
{
}
